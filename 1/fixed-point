#lang sicp
(#%require (only racket provide))
(#%require "iterative-improve")
(provide fixed-point)
(provide average)

(define (average x y) (/ (+ x y) 2))
(define tolerance 0.00001)
(define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))

(define (fixed-point f first-guess)
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))
      ;(newline)
      ;(display next)
      ))
  (try first-guess))

(define (fixed-point-iter-improve f guess)
  (iterative-improve (lambda (g) (close-enough? g (f g)))
                     (lambda (g) (f g))
                     guess))


;(fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0)
;(fixed-point-iter-improve (lambda (x) (+ 1 (/ 1 x))) 1.0)
;(fixed-point (lambda (x) (/ (log 1000) (log x))) 2.0)

;(fixed-point (lambda (x) (average x (/ (log 1000) (log x)))) 2.0)

