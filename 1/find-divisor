#lang sicp
(#%require (only racket provide))
(#%require "base")
(provide prime?)
(define (smallest-divisor n)
  (if (> n 1)
      (find-divisor n 2) 2))
(define (next test-divisor)
  (if (= test-divisor 2) 3 (+ test-divisor 2)))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))
(define (prime? n)
  (= n (smallest-divisor n)))
