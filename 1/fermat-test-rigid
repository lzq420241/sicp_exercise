#lang sicp
(#%require (only racket provide))
(#%require "base")
(#%require (only racket random))
(provide prime?)

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else
         (remainder (* base (expmod base (- exp 1) m)) m))))

(define (fermat-test n a)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it a))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n times) (fast-prime? n (- times 1)))
        (else false)))

(define (prime? n)
  (equal? true (fast-prime? n (- n 1))))
