#lang sicp
(define (square n)
  (* n n))
(define (divides? a b)
  (= (remainder b a) 0))
(define (even? n)
  (divides? 2 n))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (prime? n)
  (= n (smallest-divisor n)))
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (search-for-primes start count)
  (if (> count 0)
    (cond ((even? start) (search-for-primes (+ 1 start) count))
          ((prime? start) (timed-prime-test start)
                          (search-for-primes (+ 2 start) (- count 1)))
          (else (search-for-primes (+ 2 start) count)))
    ))


(search-for-primes 1000 3)
(search-for-primes 10000 3)
(search-for-primes 100000 3)
(search-for-primes 1000000 3)

