#lang sicp
(#%require (only racket provide))
(provide square)
(provide cube)
(provide divides?)
(provide even?)
(provide average)
(provide next-odd)
(provide fast-expt)

(define (square n)
  (* n n))

(define (cube n)
  (* n n n))

(define (divides? a b)
  (= (remainder b a) 0))

(define (even? n)
  (divides? 2 n))

(define (average x y) (/ (+ x y) 2))

(define (next-odd n)
  (if (even? n) (+ n 1) (+ n 2)))

(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

