#lang sicp
(#%require (only racket error))

(define (make-deque)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-deque?) (or (null? front-ptr) (null? rear-ptr))) 
    (define (print-deque-recur fp rp)
      (cond ((or (null? fp) (null? rp)) (display '()))
            ;((equal? fp rp) (display (car fp)))
            (else (begin (display (car fp))
                         (display "=")
                         (print-deque-recur (cddr fp) rp)))))
    (define (print-deque)
      (print-deque-recur front-ptr rear-ptr)
      (newline))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (front-deque)
      (if (empty-deque?)
          (error "FRONT called with an empty deque" front-ptr)
          (car front-ptr)))
    (define (rear-deque)
      (if (empty-deque?)
          (error "REAR called with an empty deque" rear-ptr)
          (car rear-ptr)))
    (define (rear-insert-deque! item)
      (let ((new-pair (cons item (cons '() '()))))
        (cond ((empty-deque?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair)
               (print-deque))
              (else
               (set-cdr! (cdr rear-ptr) new-pair)
               (set-cdr! new-pair (cons rear-ptr '()))
               (set-rear-ptr! new-pair)
               (print-deque)))))
    (define (rear-delete-deque!)
      (cond ((empty-deque?)
             (error "DELETE! called with an empty deque" rear-ptr))
            ((equal? front-ptr rear-ptr)
             (set! front-ptr '())
             (set! rear-ptr '())
             (print-deque))
            (else
             (set-rear-ptr! (cadr rear-ptr))
             (set-cdr! (cdr rear-ptr) '())
             (print-deque))))
    (define (front-insert-deque! item)
      (let ((new-pair (cons item (cons '() '()))))
        (cond ((empty-deque?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair)
               (print-deque))
              (else
               (set-car! (cdr front-ptr) new-pair)
               (set-cdr! (cdr new-pair) front-ptr)
               (set-front-ptr! new-pair)
               (print-deque)))))
    (define (front-delete-deque!)
      (cond ((empty-deque?)
             (error "DELETE! called with an empty deque" front-ptr))
            ((equal? front-ptr rear-ptr)
             (set! front-ptr '())
             (set! rear-ptr '())
             (print-deque))
            (else
             (set-front-ptr! (cddr front-ptr))
             (set-car! (cdr front-ptr) '())
             (print-deque))))
    (define (dispatch m)
      (cond ((eq? m 'rear-insert-deque!) rear-insert-deque!)
            ((eq? m 'front-insert-deque!) front-insert-deque!)
            ((eq? m 'rear-delete-deque!) (rear-delete-deque!))
            ((eq? m 'front-delete-deque!) (front-delete-deque!))
            ((eq? m 'front-deque) (front-deque))
            ((eq? m 'rear-deque) (rear-deque))
            ((eq? m 'empty-deque?) empty-deque?)))
    dispatch))

(define q1 (make-deque))
((q1 'rear-insert-deque!) 'a)
;a
((q1 'front-insert-deque!) 'b)
;b=a
(q1 'rear-delete-deque!)
;b
(q1 'front-delete-deque!)
((q1 'front-insert-deque!) 'c)
((q1 'front-insert-deque!) 'd)
(q1 'front-delete-deque!)
(q1 'rear-delete-deque!)
