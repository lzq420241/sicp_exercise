#lang sicp
(#%require (only racket error))

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (print-queue) (display front-ptr) (newline))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue" front-ptr)
          (car front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair)
               (print-queue))
              (else
               (set-cdr! rear-ptr new-pair)
               (set-rear-ptr! new-pair)
               (print-queue)))))
    (define (delete-queue!)
      (cond ((empty-queue?)
             (error "DELETE! called with an empty queue" front-ptr))
            (else
             (set-front-ptr! (cdr front-ptr))
             (print-queue))))
    (define (dispatch m)
      (cond ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) (delete-queue!))
            ((eq? m 'front-queue) front-queue)
            ((eq? m 'empty-queue?) empty-queue?)))
    dispatch))

(define q1 (make-queue))
((q1 'insert-queue!) 'a)
;((a) a)
((q1 'insert-queue!) 'b)
;((a b) b)
(q1 'delete-queue!)
;((b) b)
(q1 'delete-queue!)

((q1 'insert-queue!) 'c)
;(() b)