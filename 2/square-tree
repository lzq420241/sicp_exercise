#lang sicp
(define (square x) (* x x))

(define (square-tree tree)
  (cond ((null? tree) nil)
        ((not (pair? tree)) (square tree))
        (else (cons (square-tree (car tree))
                  (square-tree (cdr tree))))))

(define (square-tree-m tree)
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
             (square-tree-m sub-tree)
             (square sub-tree)))
       tree))

; exercise 2.31
(define (tree-map f tree)
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
             (tree-map f sub-tree)
             (f sub-tree)))
       tree))

(define l (list 1
                (list 2 (list 3 4) 5)
                (list 6 7)))  
(display (square-tree l))
(newline)
(display (square-tree-m l))
(newline)
(display (tree-map square l))