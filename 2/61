#lang sicp

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (if (null? set) (cons x set)
      (let ((h (car set)))
        (cond ((< x h) (cons x set))
              ((= x h) set)
              ((> x h) (cons h (adjoin-set x (cdr set))))))))
        
(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)        
         (cons (car set1)
               (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))

(define (union-set set1 set2)
  (if (null? set1) set2
      (adjoin-set (car set1)
                  (union-set (cdr set1) set2))))

(define set1 (list 1 2 3))
(define set2 (list 2 3 4))
(display (union-set set2 set1))
;(display (adjoin-set 4 set1))
(newline)
;(display (intersection-set set1 set2))
