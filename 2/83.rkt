#lang sicp
(#%require "usr_lib.rkt")
(#%require (only racket provide))
(provide type-tag)
(provide contents)
(provide get)
(provide make-integer-number)
(provide make-rational-number)
(provide make-real-number)

(define (install-integer-package)
  (define (raise n)
    (attach-tag 'rational n))
  (define (tag x)
    (attach-tag 'integer x))
  (put 'make 'integer (lambda (x) (tag x)))
  (put 'raise '(integer) raise)
  (put 'prio 'integer 0)
  (put 'add '(integer integer)
       (lambda (i1 i2) (tag (+ i1 i2))))
  'integer-install-done)
(install-integer-package)

(define (make-integer-number n)
  ((get 'make 'integer) n))

(define (install-rational-package)
  (define (raise r)
    (attach-tag 'real r))
  (define (tag x)
    (attach-tag 'rational x))
  (put 'make 'rational (lambda (x) (tag x)))
  (put 'raise '(rational) raise)
  (put 'prio 'rational 1)
  (put 'add '(rational rational)
       (lambda (r1 r2) (tag (+ r1 r2))))
  'rational-install-done)
(install-rational-package)

(define (make-rational-number n)
  ((get 'make 'rational) n))

(define (install-real-package)
  (define (raise r)
    (attach-tag 'complex r))
  (define (tag x)
    (attach-tag 'real x))
  (put 'make 'real (lambda (x) (tag x)))
  (put 'raise '(real) raise)
  (put 'prio 'real 2)
  (put 'add '(real real)
       (lambda (r1 r2) (tag (+  r1 r2))))
  'real-install-done)
(install-real-package)
       
(define (make-real-number n)
  ((get 'make 'real) n))