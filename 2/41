#lang sicp
(#%require "accumulate-n")

(define (enumerate-interval low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

(define (unique-triples n)
  (accumulate append
              nil
              (accumulate append
                          nil
                          (map (lambda (i)
                                 (map (lambda (j)
                                        (map (lambda (k) (list i j k))
                                             (enumerate-interval 1 (- j 1))))
                                      (enumerate-interval 1 (- i 1))))
                               (enumerate-interval 1 n)))))

(display (unique-triples 5))
(newline)

(define (filter predicate sequence)
  (cond ((null? sequence) nil)
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

(define (permutations s)
  (if (null? s)                    ; empty set?
      (list nil)                   ; sequence containing empty set
      (flatmap (lambda (x)
                 (map (lambda (p) (cons x p))
                      (permutations (remove x s))))
               s)))

(define (remove item sequence)
  (filter (lambda (x) (not (= x item)))
          sequence))

(define (sum? n)
  (lambda (triple) (= n (+ (car triple) (cadr triple) (caddr triple)))))

(define (make-triple-sum triple)
  (list (car triple) (cadr triple) (caddr triple) (+ (car triple) (cadr triple) (caddr triple))))

((sum? 8) (list 2 4 2))

(define (triple-sum sum n)
  (map make-triple-sum
       (filter (sum? sum)
               (flatmap
                (lambda (s) (permutations s))
                (unique-triples n)))))
(display (triple-sum 9 5))
(newline)

(define (append2 list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (append (cdr list1) list2))))

(display (append2  (list 1 2) (list nil)))