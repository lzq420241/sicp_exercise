#lang sicp
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (lookup given-key set-of-records)
  (let ((record-key (key (entry set-of-records))))
        (cond ((null? set-of-records) false)
              ((equal? given-key record-key)
               (entry set-of-records))
              ((< given-key record-key)
               (lookup given-key (left-branch set-of-records)))
              ((> given-key record-key)
               (lookup given-key (right-branch set-of-records))))))
