#lang sicp
(#%require (only racket error))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (mul-interval x 
                (check-interval (make-interval (/ 1.0 (upper-bound y))
                                               (/ 1.0 (lower-bound y))))))

(define (make-interval a b) (cons a b))
; exercise 2.7
(define (lower-bound x) (min (car x) (cdr x)))
(define (upper-bound x) (max (car x) (cdr x)))
; exercise 2.8
(define (sub-interval x y)
  (let ((p1 (- (lower-bound x) (upper-bound y)))
        (p2 (- (upper-bound x) (lower-bound y))))
    (make-interval p1 p2)))

(define (>= x y) (not (< x y)))
(define (<= x y) (not (> x y)))
(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))
(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))
(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))

; exercise 2.10
(define (check-interval x)
  (let ((u (upper-bound x))
        (l (lower-bound x)))
    (if (and (> u 0) (< l 0))
        (error "Interval contains zero." l u)
        x)))
; exercise 2.11
(define (interval-type x)
  (let ((u (upper-bound x))
        (l (lower-bound x)))
    (cond ((and (> u 0) (< l 0)) 0)
          ((and (> u 0) (>= l 0)) 1)
          ((and (<= u 0) (< l 0)) -1))))
(define (mul-interval2 x y)
  (let ((tx (interval-type x))
        (ty (interval-type y))
        (ux (upper-bound x))
        (lx (lower-bound x))
        (uy (upper-bound y))
        (ly (lower-bound y)))
        (cond ((and (> tx 0) (> ty 0)) (make-interval (* lx ly) (* ux uy)))
              ((and (> tx 0) (= ty 0)) (make-interval (* ux ly) (* ux uy)))
              ((and (> tx 0) (< ty 0)) (make-interval (* ux ly) (* lx uy)))
              ((and (= tx 0) (> ty 0)) (make-interval (* lx uy) (* ux uy)))
              ((and (= tx 0) (= ty 0)) (make-interval (min (* lx uy) (* ux ly)) (max (* ux uy) (* lx ly))))
              ((and (= tx 0) (< ty 0)) (make-interval (* ux ly) (* lx ly)))
              ((and (< tx 0) (> ty 0)) (make-interval (* lx uy) (* ux ly)))
              ((and (< tx 0) (= ty 0)) (make-interval (* lx uy) (* lx ly)))
              ((and (< tx 0) (< ty 0)) (make-interval (* ux uy) (* lx ly))))))
; exercise 2.12
(define (make-center-percent c p)
  (make-center-width c (* c p)))
(define (percent i)
  (abs (/ (width i) (center i))))

(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))
(define (par2 r1 r2)
  (let ((one (make-interval 1 1))) 
    (div-interval one
                  (add-interval (div-interval one r1)
                                (div-interval one r2)))))

(define i1 (make-interval 9.8 10.2))
(define i2 (make-interval 99.0 101))
; exercise 2.9
(width i1)
(width i2)
(width (sub-interval i1 i2))
(width (add-interval i1 i2))
(width (mul-interval2 i1 i2))
(width (div-interval i1 i2))
(newline)
; exercise 2.13
; P_mul = P_i1 + P_i2
(percent i1)
(percent i2)
(percent (mul-interval2 i1 i2))
(newline)
; exercise 2.14
(par1 i1 i2)
(par2 i1 i2)
(percent (div-interval i1 i1))
(percent (div-interval i1 i2))

