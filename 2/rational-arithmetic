#lang sicp
(#%require "../1/gcd")

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))

(define (regular-r x)
  (let ((n (numer x))
        (d (denom x)))
    (if (and (> n 0) (< d 0))
        (cons (- 0 n) (- 0 d))
        x)))

(define (make-rat n d)
  (let ((g (gcd n d)))
    (regular-r (cons (/ n g) (/ d g)))))

(define (numer x) (car x))

(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define one-third (make-rat 1 3))
(define one-fourth (make-rat 1 -4))
(define one-fourth-1 (make-rat -1 4))
(define neg-one-third (make-rat 1 -3))
(print-rat (mul-rat neg-one-third one-third))
(print-rat (add-rat one-fourth one-fourth-1))