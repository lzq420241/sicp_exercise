#lang sicp

(#%require (only racket provide))
(provide make-segment)
(provide start-segment)
(provide end-segment)
(provide make-point)
(provide x-point)
(provide y-point)


(define (average x y) (/ (+ x y) 2))
(define (midpoint-segment s)
  (let ((p1 (start-segment s))
        (p2 (end-segment s)))
        (let ((p1x (x-point p1))
          (p2x (x-point p2))
          (p1y (y-point p1))
          (p2y (y-point p2)))
          (make-point (average p1x p2x) (average p1y p2y)))))

(define (make-segment p1 p2)
  (cons p1 p2))
(define (start-segment s) (car s))
(define (end-segment s) (cdr s))

(define (make-point x y)
  (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
    
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(define p1 (make-point 1 2))
(define p2 (make-point 5 4))
;(print-point (midpoint-segment (make-segment p1 p2)))