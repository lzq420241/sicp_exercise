#lang sicp
(#%require "accumulate-n")

(define (dot-product v w)
  (accumulate + 0 (map * v w)))

(define (matrix-*-vector m v)
  (map (lambda (r) (dot-product r v)) m))

(define (transpose mat)
  (accumulate-n cons nil mat))

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (r) (matrix-*-vector cols r)) m)))

(define s (list (list 1 2 3)
                (list 4 5 6)
                (list 7 8 9)))
(display (transpose s))
(newline)
(display (matrix-*-matrix s s))