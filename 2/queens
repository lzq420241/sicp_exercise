#lang sicp
(#%require "accumulate-n")

(define (enumerate-interval low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

(define (filter predicate sequence)
  (cond ((null? sequence) nil)
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

(define (queens board-size)
  (define (queen-cols k)  
    (if (= k 0)
        (list nil)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))

(define empty-board  nil)
(define (adjoin-position r k rest-queens)
  (append (list (list r k)) rest-queens))

(define (safe? k pos)
  (null? (filter (lambda (x) (equal? x false))
                 (map (lambda (p) (not (or (= (caar pos) (car p))
                                           (= (abs (- (caar pos) (car p)))
                                              (abs (- k (cadr p)))))))
                      (cdr pos)))))
(display (queens 8))

  