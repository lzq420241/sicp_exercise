#lang sicp

(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (append (cdr list1) list2))))

(define (length items)
  (if (null? items)
      0
      (+ 1 (length (cdr items)))))

(define (deep-reverse items)
  (define (iter items acc)
    (if (null? items)
        acc
        (let ((head (car items))
              (tail (cdr items)))
          (if (list? head)
              (iter tail (append (list (deep-reverse head)) acc))
              (iter tail (append (list head) acc))))))
  (iter items nil))


(define (reverse items)
  (define (reverse-iter items acc)
    (if (null? items)
        acc
        (reverse-iter (cdr items) (cons (car items) acc))))
  (reverse-iter items nil))
  

(define x (list (list 1 2) (list 3 4)))
(display x)
(newline)
(display (deep-reverse x))
(newline)

(define y (list (list 3 4) 5 (list 6 7)))
(display y)
(newline)
(display (deep-reverse y))
